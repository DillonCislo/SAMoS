/* *************************************************************
 *  
 *   Active Particles on Curved Spaces (APCS)
 *   
 *   Author: Rastko Sknepnek
 *  
 *   Division of Physics
 *   School of Engineering, Physics and Mathematics
 *   University of Dundee
 *   
 *   (c) 2013, 2014
 *   
 *   This program cannot be used, copied, or modified without
 *   explicit permission of the author.
 * 
 * ************************************************************* */

/*!
 * \file constraint_peanut.hpp
 * \author Rastko Sknepnek, sknepnek@gmail.com
 * \date 11-Nov-2014
 * \brief Declaration of ConstraintPeanut class.
 */ 

#ifndef __CONSTRAINT_PEANUT_HPP__
#define __CONSTRAINT_PEANUT_HPP__

#include <cmath>

#include "system.hpp"
#include "parse_parameters.hpp"
#include "constraint.hpp"


using std::sqrt;
using std::fabs;


/*! Enforces all particles to be on the surface of a peanut shaped oval.
 *  It is generated by rotating a Cassini oval curve around x axis.
 *  The surface is given in the implicit for as
 *  \f$ f(x,y,z) = (x^2+y^2+z^2)^2 - 2a^2(x^2-y^2-z^2)+a^4-b^4 \f$, 
 *  where \f$ a \$ and \f$ b \f$ control shape of the oval. Note that
 *  \f$ a < b \$ in order for the oval not to be disconnected. 
*/
class ConstraintPeanut : public Constraint
{
public:
  
  //! Constructor
  //! \param id unique constraint id
  //! \param sys pointer to the system object
  //! \param msg Pointer to the internal state messenger
  //! \param param parameters that define the manifolds (e.g., sphere radius)
  ConstraintPeanut(SystemPtr sys, MessengerPtr msg, pairs_type& param) : Constraint(sys,msg,param)
  { 
    if (param.find("a") == param.end())
    {
      m_msg->msg(Messenger::WARNING,"Peanut constraint. Parameter a has not been set. Assuming 8.0");
      m_a = 10.0;
    }
    else
    {
      m_msg->msg(Messenger::INFO,"Peanut constraint. Parameter a set to "+param["a"]+".");
      m_a = lexical_cast<double>(param["a"]);
    }
    if (param.find("b") == param.end())
    {
      m_msg->msg(Messenger::WARNING,"Peanut constraint. Parameter b has not been set. Assuming 10.0");
      m_b = 8.0;
    }
    else
    {
      m_msg->msg(Messenger::INFO,"Peanut constraint. Parameter b set to "+param["b"]+".");
      m_b = lexical_cast<double>(param["b"]);
    }
    if (m_b <= m_a)
    {
      m_msg->msg(Messenger::ERROR,"Parameter b has to be larger than parameter a. Otherwise the surface will be disconnected.");
      throw runtime_error("Incompatible parameters in Peanut constraint.");
    }
    if (param.find("maxiter") == param.end())
    {
      m_msg->msg(Messenger::WARNING,"Peanut constraint. Maximum number of iterations has not been set. Assuming 100");
      m_max_iter = 100;
    }
    else
    {
      m_msg->msg(Messenger::INFO,"Peanut constraint. Maximum number of iterations set to "+param["maxiter"]+".");
      m_max_iter = lexical_cast<int>(param["maxiter"]);
    }
    if (param.find("tol") == param.end())
    {
      m_msg->msg(Messenger::WARNING,"Peanut constraint. Tolerance has not been set. Assuming 1e-6.");
      m_tol = 1e-6;
    }
    else
    {
      m_msg->msg(Messenger::INFO,"Peanut constraint. Tolerance set to "+param["tol"]+".");
      m_tol = lexical_cast<int>(param["tol"]);
    }
  }
  
  //! Computes normal to the surface
  //! \param p reference to a particle
  //! \param Nx x component of the normal (returned)
  //! \param Ny y component of the normal (returned)
  //! \param Nz z component of the normal (returned)
  void compute_normal(Particle& p, double& Nx, double& Ny, double& Nz);
  
  //! Enforce constraint
  void enforce(Particle&);
  
  //! Rotate director around normal vector to the sphere
  void rotate_director(Particle&, double);
  
  //! Rotate velocity around normal vector to the sphere
  void rotate_velocity(Particle&, double);
  
  //! Project torque onto normal vector onto the sphere and return rotation angle change
  double project_torque(Particle&);
    
private:
  
  double m_a;     //!< Parameter a
  double m_b;     //!< Parameter b
  int m_max_iter; //!< Maximum number of iterations to enforce the constraint
  double m_tol;   //!< Tolerance for the constraint to be satisfied. 
  
};

typedef shared_ptr<ConstraintPeanut> ConstraintPeanutPtr;  //!< Shared pointer to the Constraint object

#endif