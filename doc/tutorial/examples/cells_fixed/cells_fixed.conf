# * *************************************************************
# *  
# *   Soft Active Mater on Surfaces (SAMoS)
# *   
# *   Author: Rastko Sknepnek
# *  
# *   Division of Physics
# *   School of Engineering, Physics and Mathematics
# *   University of Dundee
# *   
# *   (c) 2013, 2014
# * 
# *   School of Science and Engineering
# *   School of Life Sciences 
# *   University of Dundee
# * 
# *   (c) 2015
# * 
# *   Author: Silke Henkes
# * 
# *   Department of Physics 
# *   Institute for Complex Systems and Mathematical Biology
# *   University of Aberdeen  
# * 
# *   (c) 2014, 2015
# *  
# *   This program cannot be used, copied, or modified without
# *   explicit written permission of the authors.
# * 
# * ***************************************************************

# Example for fixed boundaries with no division. This might be the simplest case.

# All runtime messages will be sent to file messages.msg
messages messages.msg
config configuration {type = json}

# box is cubic with size 100x100x10 
box fixed { lx = 100.0;  ly = 100.0;  lz = 10.0 }

# We read in particle positions 
input fixed.input

# Read boundary connectivity
read_cell_boundary fixed.boundary

# max_perimeter and max_edge_len refer to the triangulation faces and edges. 
# The triangulation flag indicates that our particles are vertices of a mesh and we are running a cell simulation.
# The static_boundary flag prohibits the addition of new boundary particles which is required when, for example,
# the cells grow and divide. In this case we don't need this flag since the boundary forms a dense fixed ring and
# so the criteria for adding additional boundary particles will never be satisfied.
nlist { rcut = 2.4; pad = 0.5; build_faces; max_perimeter = 30.0; max_edge_len = 20.0; triangulation; static_boundary; }

# We constrain all particles to move only in the xy plane.
constraint plane { unlimited  }

# Cell potential
# K is the area term stiffness, gamma is the perimeter stiffness 
# lambda is the junction tension
pair_potential vp { K = 1.0; gamma = 1.0; lambda = -5.7; }

# Usually set boundary line tension and bending to stabilize the system but there is no need here.
#pair_potential line_tension { lambda = 0.4; }
#pair_potential boundary_bending { kappa = 0.1; }

# Soft repulsion between cell centres as well as boundary particles. 
# In this simulation the boundary is made up of a high density of boundary particles.
# Soft repulsion between cell centres and the boundary particles then constrains the particles inside.
# A side effect of the high number of boundary particles is that cells at the boundary have well
# rounded exterior sides.
# k sets the strength of the interaction and a is the radius.
pair_potential soft { k = 10.0; a = 1.0 }

# Logging of simple metrics
log cell.log { freq = 100; size; area; avg_perim; vp_energy }

# .vtp file for the cell centres, boundary particles and delaunay triangulation.
dump cell { type=vtp; start=0; freq=100; multi }
# .vtp file for the polygonal cell shapes
dump cell_dual { type=vtp; start=0; freq=100; multi; dual }
# Data dump. Has extension '.dat' .
dump cell { type=full; start=0; freq=100; multi; id; tp; boundary; coordinate; velocity; force; director; area; cell_area; cell_perim; keys }
# Faces files can be used to reconstruct the triangulation and the polygonal mesh in python for analysis.
dump faces { type=face; start=0; freq=100; multi; }

# Adding the activity to the non-boundary particles only. Alpha is v0 the activity parameter.
external self_propulsion { alpha = 1.2; exclude_boundary; } 

# Running the simulation
#
timestep 0.01

# Some groups are created automatically including 'all', 'tissue', 'boundary', 'internal' and 'environment'.
# Setting group to 'internal' means that although the cells still feel the effect of the boundary particles
# they are not updated during the integration step. In other words the boundary is fixed.
integrator brownian_pos {group= internal; seed = 1; mu = 1.0; }

# Update the director we use another integrator with a bit of rotational noise
integrator brownian_align { seed = 0; nu = 0.1; }


run 10000



