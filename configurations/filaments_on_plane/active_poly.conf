# * ************************************************************* 
# *  
# *   Soft Active Mater on Surfaces (SAMoS) 
# *  
# *   Author: Rastko Sknepnek 
# *   
# *   Division of Physics 
# *   School of Engineering, Physics and Mathematics 
# *   University of Dundee  
# *    
# *   (c) 2013, 2014  
# *  
# *   School of Science and Engineering  
# *   School of Life Sciences 
# *   University of Dundee 
# *  
# *   (c) 2015 
# *  
# *   Author: Silke Henkes  
# *  
# *   Department of Physics  
# *   Institute for Complex Systems and Mathematical Biology  
# *   University of Aberdeen   
# *  
# *   (c) 2014, 2015 
# *   
# *   This program cannot be used, copied, or modified without 
# *   explicit written permission of the authors. 
# *  
# * ***************************************************************  
# 
#  Simulation of active polymer on a plane  
messages messages.msg 
# Every simulation requires a box 
# "periodic" means that periodic boundary are applied
# box is cubic with size 40x40x10 (units of particle radius r = 1) and spans from -20 to 20 in 
# x and y directions and -5 to 5 in z direction
box periodic {lx= 61.000000; ly = 61.000000 ; lz = 2.000000 } 
# We read in particle positions from file plane.dat (generated by tools in utils directory)
input filaments.input
# Read bonds
read_bonds filaments.bonds
# Read angles
read_angles filaments.angles
# We set the neighbour list with cutoff distance 2.4 and padding distance of 0.5
nlist { rcut = 3.0; pad = 0.5 }
# In following we define different data outputs
# Ouput configuration in MOL2 format
dump poly_test { type=vtp; start=0; freq=100; multi;  }

# We constrain all particles to move only on the xy plane 
constraint plane {  } 

external_align tangent { tau = 0.1 }

# All particles are interacting with the WCA potential potential of strength 
#pair_potential lj { epsilon = 1.0; sigma = 1.0; rcut = 1.122462048309373; shifted } 
pair_potential lj { epsilon = 1.0; sigma = 1.0; rcut = 2.5; shifted } 
pair_potential motor { alpha = 2.0; a = 1.5 } 

# add active bonds 
#bond active { f = 0.16 } 
# add harmonic bonds 
bond harmonic { k = 330.0; l_eq = 1.0 } 
# add fene bonds 
#bond fene { k = 330.000; ro = 1.3 } 

# add harmonic angle potential 
angle harmonic { k = 10.0} 

integrator nve { dt=0.005; limit=0.0001 } 


# Run for 10,000 steps 
run 1000


disable nve { group=all } 




# Now we are at the point to execute actual simulations 
# We switch the integrator to brownian.
# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator 
# dt is the integrator time step (in Lennard-Jones units) 
# nu sets the width of the distribution for random changes of velocity 
# mu is particle mobility 
# v0 is the intensity of the self-propelling velocity
# we use contstant temperature, with the value set by paramter min_val 
integrator brownian { dt=0.00025; seed = 1;  nu = 0.0; mu = 1.0; v0 = 0.0; temperature_control=constant; min_val = 0.5; group = all } 
#integrator brownian { dt=0.001; seed = 1;  nu = 0.0; mu = 1.0; v0 = 0.0; group = all } 


# Finally, we run simulation for 1,000,000 time steps 
run 100000
