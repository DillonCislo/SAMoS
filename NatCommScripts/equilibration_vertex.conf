# *****************************************************************************
# *
# *  This Python script is a part of tha analysis of the data published in 
# *  the paper: "Universal motion patterns in confluent cell monolayers"
# *  by Silke Henkes, Kaja Kostanjevec, J. Martin Collinson, Rastko Sknepnek, 
# *  and Eric Bertin, Jounral name, vol, page (2019).
# *
# *  Please refer to the document Computational_summary.pdf for a detailed
# *  description of the tasks performed by this script.
# * 
# *****************************************************************************


# All runtime messages will be sent to file messages.msg
messages messages.msg

# Every simulation requires a box
# "periodic" means that periodic boundary are applied.
# box is cubic with size 100x100x10 (units of particle radius r = 1)
box fixed { lx = 200.0;  ly = 200.0;  lz = 10.0 }

# We read in particle positions from file plane.dat (generated by tools in utils directory)
input epithelial_randomini.dat

# Group 1 is the inside, group 2 is the boundary
group g1 { type = 1 }
group g2 { type = 2 }

# We set the neighbour list with cutoff distance 2.4 and padding distance of 0.5
# Triangulation is for Voronoi, no triangulation is for contact
nlist { rcut = 2.4; pad = 0.5}

# We constrain all particles to move only on the xy plane with lx=100, ly = 100 (actually those are read from the box)
constraint plane { lx = 200.0;  ly = 200.0;  }

# Initially, turn on only the soft potential for relaxation
# border particles are stiffer to avoid going through
pair_potential soft { k = 1.0; use_particle_radii }
pair_param soft { type_1 = 1; type_2 = 1; k=1.0 }
pair_param soft { type_1 = 1; type_2 = 2; k=5.0}

log equilibration.log {freq = 1000; soft_energy}

# diagnostic output
dump equil { type = vtp; start=0; freq=10000; multi }
dump equil { type = full; start=0; freq=50000; multi; id; tp; radius; coordinate; velocity; director; normal; area; boundary; keys}

# In order to relax the system and remove large overlaps 
# we first run system using a brownian integrator
# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator
# dt is the integrator time step (in Lennard-Jones units) 
# nu sets the width of the distribution for random changes of velocity
# mu is particle mobility
# v0 is the intensity of the self-propelling velocity
integrator brownian {group = g1; dt=0.01; seed = 1;  nu = 0.0; mu = 1.0;  v0 = 0.0 }
# fixed run time for equilibration
run 100001





