# *****************************************************************************
# *
# *  This Python script is a part of tha analysis of the data published in 
# *  the paper: "Universal motion patterns in confluent cell monolayers"
# *  by Silke Henkes, Kaja Kostanjevec, J. Martin Collinson, Rastko Sknepnek, 
# *  and Eric Bertin, Jounral name, vol, page (2019).
# *
# *  Please refer to the document Computational_summary.pdf for a detailed
# *  description of the tasks performed by this script.
# * 
# *****************************************************************************


# Testing configuration for phase diagram
# Starting 14/10/16 - silke

# Template for simulation of active cells using PV model.
# I will make an effort to keep this file up to date as a representative configuration file for our cell simulations

# All runtime messages will be sent to file messages.msg
messages messages.msg
config configuration {type = json}

# box is cubic with size 100x100x10 
box fixed { lx = 1000.0;  ly = 1000.0;  lz = 50.0 }

# We read in particle positions 
# This is for now our spherical relaxed initial configuration
input vertex_input.dat

group g1 { type = 1 }
group g2 { type = 2 }

# Read boundary connectivity
# form of the file. 
# # comments/headers
# edge_id particle_id_1 particle_id_2
# Boundary of the spherical initial relaxed configuration
read_cell_boundary vertex_bound.dat

# neighbourlist. The static_boundary flag prevents new boundary particles from being added to the system, use for fixed boundaries.
# max_perimeter and max_edge_len refer to the triangulation faces and edges. They are important parameters and often set the step at which the simulation will fail.
#
# Add new boundary particles when appropriate
nlist { rcut = 25; pad = 2.5 ; build_faces; max_perimeter = 200.0; max_edge_len = 100.0; triangulation; }

# We constrain all particles to move only on the xy plane.
constraint plane { unlimited  }

# Cell potential
# K is the area term stiffness, gamma is the perimeter stiffness 
# lambda is the junction tension
pair_potential vp { K = @KVAL; gamma = @GAMMA; lambda = @LAMBDA }
# phase in the vertex model forces based on particle age over a time of 1.0
#pair_potential vp { K = 1.0; gamma = 0.1; lambda = -0.60; phase_in=linear; min_val=0.; max_val=1.0 }

# line tension only applies to the particles that are on the boundary
# The 2.0 here is the equilibrium value of the line - no tension if the boundary stays that way
pair_potential line_tension { lambda = 21; l0 = 0.0 }
pair_potential boundary_bending { kappa = 8000; }

# Soft repulsion  
# radius of 1.0 is quite high here and may not be necessary for shape index < 4.0 (roughly)
# I prefer to use 0.5 for most cases.
pair_potential soft { k = 280; a = 7.5 }
#pair_potential soft { k = 10.0; a = 0.5; phase_in=linear; min_val=0.; max_val=1.0 }


# frequent logging of simple metrics
log cell.log { freq = 1000; size; area; avg_perim; vp_energy }

# .vtp dumps
dump cell { type=vtp; start=0; freq=@FREQ; multi; include_mesh }
dump cell_dual { type=vtp; start=0; freq=@FREQ; multi; dual }
# text dumps
dump cell { type=full; start=0; freq=@FREQ; multi; id; tp; boundary; coordinate; velocity; director; cell_area; cell_perim; keys }
# faces files can be used to reconstruct the triangulation and the mesh in python for analysis.
#dump faces { type=face; start=0; freq=5000; multi; }

# IMPORTANT. Adding the activity to the non-boundary particles only. Alpha is v0. Then v0 in the integrator should be set to 0.
external self_propulsion { alpha = @V0; exclude_boundary; } 

# Running the simulation
#
timestep 0.001

# IMPORTANT. v0 is set to 0. in the integrator. We use 'external self_propulsion {}' command to add activity.
# 'Boundary' and 'Internal' groups automatically created 
# Open boundaries
integrator brownian { group = all; seed = @SEED; mu = 1.0; nu = @NU}
#integrator brownian_pos {group= g1; seed = @SEED;  mu = 1.0; }
#integrator brownian_align {group=g1; seed = @SEED; nu = @NU; }


run @TRUN



